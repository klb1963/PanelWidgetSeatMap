import {Module} from 'sabre-ngv-core/modules/Module';
import { getService } from './Context';

import { RedAppSidePanelButton } from 'sabre-ngv-redAppSidePanel/models/RedAppSidePanelButton'; // –ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å Workflow
import { RedAppSidePanelConfig } from 'sabre-ngv-xp/configs/RedAppSidePanelConfig'; // –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
import {ExtensionPointService} from 'sabre-ngv-xp/services/ExtensionPointService'; // –ø–æ–¥–∫–ª—é—á–∞–µ–º—ã–µ RedApp —Å–µ—Ä–≤–∏—Å—ã

import { DrawerService } from "sabre-ngv-app/app/services/impl/DrawerService";
import { LargeWidgetDrawerConfig } from 'sabre-ngv-core/configs/drawer/LargeWidgetDrawerConfig';

import { showBanners } from './components/showBanners'; // –î–æ–±–∞–≤–ª—è–µ–º showBanners
import { SeatMapPanel } from './views/SeatMapPanel'; // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
import { SeatMapModal } from './views/SeatMapModal'; // –û—Ç–∫—Ä—ã–≤–∞–µ–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ

export class Main extends Module { 
    init(): void { 
        super.init();
        this.setup(); // —Å–µ—Ç–∞–ø –∫–Ω–æ–ø–æ–∫

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞
        let cfgAbstractViewOptions = {
            title: 'Seat Map Selection',
            maximized: false,
            cssClass: 'dn-panel results-panel-widget-container',

            actions: [
                {
                    caption: 'CANCEL',
                    actionName: 'close',
                    type: 'secondary',
                    cssClass: 'btn',
                    className: 'app.common.views.Button'
                },
                {
                    caption: 'CONFIRM',
                    actionName: 'confirmSelection',
                    type: 'default',
                    cssClass: 'btn',
                    className: 'app.common.views.Button'
                }
            ]
        };

        // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ SeatMap
        const drawerConfig = new LargeWidgetDrawerConfig(SeatMapPanel, SeatMapModal, cfgAbstractViewOptions);

        console.log("‚û°Ô∏è Registering SeatMapPanel in DrawerService...");
        getService(DrawerService).addConfig(['shopping-flight-segment'], drawerConfig);
        console.log("‚úÖ SeatMap Widget registered in DrawerService");
    } 

    private setup(): void {
        const baseCssClassNames = 'btn btn-secondary side-panel-button redapp-web-customworkflow';

        // üîπ **–°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫**
        const buttonsList = [
            new RedAppSidePanelButton('Show Banners', baseCssClassNames + '-banners', showBanners),
            new RedAppSidePanelButton('Test Workflow', 'btn btn-secondary', this.onTestWorkflowClick.bind(this)),
            new RedAppSidePanelButton('New Button', 'btn btn-primary', () => console.log('New Button Clicked!'))
        ];

        // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∫–Ω–æ–ø–æ–∫
        const config = new RedAppSidePanelConfig(buttonsList, 10);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
        getService(ExtensionPointService).addConfig('redAppSidePanel', config);
        console.log("‚úÖ Buttons added to RedApp Side Panel");
    }

    // üîπ **–ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ**
    private onTestWorkflowClick(): void {
        console.log("Test Workflow button clicked! Opening modal...");
    
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ DrawerService
        const drawerService = getService(DrawerService);
        if (!drawerService) {
            console.error("‚ùå DrawerService not found!");
            return;
        }
    
        // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const modalConfig = {
            title: 'Test Modal',
            maximized: false, // –û–±—ã—á–Ω–æ–µ –æ–∫–Ω–æ
            cssClass: 'test-modal',
            actions: [
                {
                    caption: 'CLOSE', // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                    actionName: 'close',
                    type: 'secondary',
                    cssClass: 'btn',
                    className: 'app.common.views.Button'
                }
            ]
        };
    
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ–∫–Ω–∞
        console.log("üîπ Creating LargeWidgetDrawerConfig...");
        
        try {
            // –°–æ–∑–¥–∞—ë–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const drawerConfig = new LargeWidgetDrawerConfig(SeatMapPanel, SeatMapModal, modalConfig);
            console.log("‚úÖ LargeWidgetDrawerConfig created!");
    
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DrawerService
            drawerService.addConfig(['test-modal'], drawerConfig);
            console.log("‚úÖ Modal registered in DrawerService!");
        } catch (error) {
            console.error("‚ùå Error while creating or adding drawerConfig:", error);
        }
    }
}
